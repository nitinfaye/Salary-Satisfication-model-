# -*- coding: utf-8 -*-
"""salary.satisfaction.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1GrttPJ5XfsskQXfUAP4LidWpHq8LnL1x

#install scikit-learn liabrary
"""

!pip install -U scikit-learn
!pip install pandas

"""##import liabrary"""

import os
import csv
import datetime
import joblib
import warnings
warnings.filterwarnings("ignore")

import numpy as np
import pandas as pd
import sklearn.metrics as metrics
from sklearn.metrics import accuracy_score
from sklearn.metrics import f1_score
from random import Random
from sklearn.model_selection import train_test_split
from sklearn.ensemble import RandomForestRegressor
from sklearn.ensemble import RandomForestClassifier
from sklearn.preprocessing import MinMaxScaler
from sklearn.linear_model import LinearRegression
from sklearn.metrics import mean_squared_error, mean_absolute_error, r2_score

"""#  Load dataset """

with open("salary,satisfaction.csv", "r",encoding="ISO-8859-1") as file_obj:
  file_data = csv.DictReader(file_obj, skipinitialspace = True)
  file_list = list(file_data)
  file_list

df =pd.DataFrame(file_list)
df.head()

"""##Random Forest Regression"""

df_new = df.groupby('id').sum()['Target_Salary'].reset_index()
df_new.head()

def tts(data):
  
    train, test = train_test_split(data.values ,test_size=0.20,random_state= 110)
    
    return train, test

train, test = tts(df_new)

print(train.shape)
print(test.shape)

def scale_data(train_set, test_set):
    #apply Min Max Scaler
    scaler = MinMaxScaler(feature_range=(-1, 1))
    scaler = scaler.fit(train_set)
    
    # reshape training set
    train_set = train_set.reshape(train_set.shape[0], train_set.shape[1])
    train_set_scaled = scaler.transform(train_set)
    
    # reshape test set
    test_set = test_set.reshape(test_set.shape[0], test_set.shape[1])
    test_set_scaled = scaler.transform(test_set)
    
    X_train, y_train = train_set_scaled[:, 1:], train_set_scaled[:, 0:1].ravel()
    X_test, y_test = test_set_scaled[:, 1:], test_set_scaled[:, 0:1].ravel()
    
    return X_train, y_train, X_test, y_test, scaler

X_train, y_train, X_test, y_test, scaler_object = scale_data(train, test)

y_train.shape

y_test

regressor = RandomForestRegressor(n_estimators=100, max_depth=20)
regressor.fit(X_train, y_train)

y_pred = regressor.predict(X_test)
y_pred

rmse = np.sqrt(mean_squared_error(y_pred, y_test))
print(f"RMSE: {rmse}")

"""##Random ForestClassifier"""

df_clf =df[["Target_Salary","Target_Satisfied","dti","last_pymnt_amnt"]]
df_clf.head(11)

df_clf.info()

df_clf.describe()

X = df_clf.drop(['Target_Satisfied'],axis=1).values
y = df_clf['Target_Satisfied'].values

X

y

X_train , X_test, y_train , y_test = train_test_split(X,y, test_size= 0.20,random_state= 21)

model = RandomForestClassifier(n_estimators=100, max_depth=20)

model.fit(X_train, y_train)

# make class predictions
y_pred = model.predict(X_test)
accuracy=accuracy_score(y_test, y_pred)
print(f'ACCURACY:{accuracy}')
print('\n')
# generate classification report
from sklearn import metrics
print(metrics.classification_report(y_test, y_pred))

"""**f1 score is 0.88 show**"""